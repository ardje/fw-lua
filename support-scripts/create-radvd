#!/usr/bin/lua
local function readconfig(file,config)
	local f=loadfile(file,"t",config)
	f()
end
local function readvids(skipvids)
	local f=io.popen("/bin/ip li ls")
	local vids={}
	for l in f:lines() do
		local _,ifname=l:match("^(%d+): ([-a-z0-9]+)[@:]")
		if ifname then
			local vid,gw=ifname:match("^vlan([0-9]+)-(.*)")
			if gw and skipvids[vid] == nil then vids[#vids+1]={vid=vid} end
		end
	end
	f:close()
	return vids
end
local function readprefixes(vids,skipprefixes)
	for _,vidnet in ipairs(vids) do
		local n={}
		vidnet.net=n
		local f=io.popen("/bin/ip -6 a ls dev vlan"..vidnet.vid)
		for l in f:lines() do
			local inet6=l:match("^ +inet6 ([0-9a-f]+:[0-9a-f]+:[0-9a-f]+:[0-9a-f]+):")
			if inet6 and (inet6:match("^2") or inet6:match("^f[cd]")) then
				for _,i in ipairs(skipprefixes) do
					if inet6:match(i) then
						inet6=nil
						break
					end
				end
				if inet6 then n[#n+1]=inet6 end
				--print(vidnet.vid,inet6)
			end
		end
	end
end

local function writeconfig(file,vids,prefix,template)
	local f
	if file ~= nil then
		f=io.open(file,"wb")
	else
		f=io.stdout
	end
	for _,v in ipairs(vids) do
		local p=""
		for _,n in ipairs(v.net) do
			p=p..prefix:gsub("@_([A-Z]+)_@",{NET=n})
		end
		f:write((template:gsub("@_([A-Z]+)_@",{VID=v.vid,PREFIX=p})))
	end
	if f ~= io.stdout then f:close() end
end
local function main()
	local config={
		skipvids={},
		skipprefixes={}
	}
	readconfig("create-radvd.conf",config)
	local vids=readvids(config.skipvids)
	table.sort(vids,function(a,b)  return tonumber(a.vid) < tonumber(b.vid) end )
	readprefixes(vids,config.skipprefixes)
	local prefix=assert(config.prefix) or {}
	local template=assert(config.template) or {}
	writeconfig(arg[1], vids,prefix,template)
end
main(arg[1])
